on:
  workflow_dispatch:
    inputs:
      TAG:
        required: true
        description: The tag to build and publish (as is)

name: Deploy tagged release
run-name: Deploy tagged release ${{ inputs.TAG }}

# gh/actions/runner/issues/1007#issuecomment-808904408
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') || inputs.TAG != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${{ inputs.TAG }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          # The Gradle wrapper's version (already the default, putting it here to clarity)
          gradle-version: wrapper
          # Removing unused files from Gradle User Home before saving to cache (i.e. older versions of gradle)
          gradle-home-cache-cleanup: true
          # Cache downloaded JDKs in addition to the default directories.
          gradle-home-cache-includes: |
            caches
            notifications
            jdks

      - name: Setup key
        run: |
          # Install gpg secret key
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --no-tty --use-agent --import  &>/dev/null
          # Verify gpg secret key
          gpg --list-secret-keys --keyid-format LONG
          # Adding fingerprint to trustdb
          echo '${{ secrets.GPG_FINGERPRINT }}:6:' | gpg --batch --no-tty --use-agent --import-ownertrust
          cat <<'EOF' >> ~/.gnupg/gpg.conf
          use-agent
          pinentry-mode loopback
          EOF

      - name: Build and test
        env:
          S3FS_BUCKET_NAME: ${{ secrets.S3FS_BUCKET_NAME }}
          S3FS_ACCESS_KEY: ${{ secrets.S3FS_ACCESS_KEY }}
          S3FS_SECRET_KEY: ${{ secrets.S3FS_SECRET_KEY }}
          S3FS_REGION: ${{ secrets.S3FS_REGION }}
          S3FS_PROTOCOL: "https"
        run: ./gradlew build -PwithSignature=${{ fromJSON(steps.deploy_check.outputs.result).is_deployable }} -Psigning.gnupg.passphrase="${{ secrets.GPG_PASS }}" --warn --stacktrace

      - name: Check file signature
        if: ${{ fromJSON(steps.deploy_check.outputs.result).is_deployable == 'true' }}
        run: |
          ls -al ./build/libs/
          for f in ./build/libs/*.asc; do 
            echo "Verifying $f"
            gpg --verify $f          
          done

      - name: Publish release to Maven Central
        env:
          S3FS_PUBLISH_SONATYPE_USER: "${{ secrets.S3FS_PUBLISH_SONATYPE_USER }}"
          S3FS_PUBLISH_SONATYPE_PASS: "${{ secrets.S3FS_PUBLISH_SONATYPE_PASS }}"
        run: ./gradlew publish
